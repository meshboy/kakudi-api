{"version":3,"sources":["../../../src/api/modules/auth.js"],"names":["expiresIn","secret","checkToken","signIn","id","Jwt","sign","validateToken","req","res","next","loginUser","email","body","password","schema","Joi","object","keys","string","required","result","validate","error","status","json","message","User","findOne","exec","then","user","comparePassword","data","token","_id","catch","decodeToken","headers","access_token","authorization","getUser","findById","createUser","username","console","log","boody","newUser","passwordHash","generateHashPassword","save","doc","secure"],"mappings":"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","file":"auth.js","sourcesContent":["/**\n *created by Meshileya Seun <meshileyaseun@gmail.com/> 4/12/18\n * */\nimport ExpressJwt from \"express-jwt\";\nimport Jwt from \"jsonwebtoken\";\nimport Joi from \"joi\";\nimport { User } from \"../resources/user/user.model\";\n\nconst expiresIn = \"10d\";\nconst secret = \"test.secret\";\nconst checkToken = ExpressJwt({ secret });\n\n/**\n * @param id\n * @returns a token with user id being wrapped\n */\nexport const signIn = id => Jwt.sign({ id }, secret, { expiresIn });\n\n/**\n *\n * @param req\n * @param res\n * @param next\n * checktoken sniffs through the req, decode the token\n */\nconst validateToken = (req, res, next) => {\n  checkToken(req, res, next);\n};\n\nexport const loginUser = (req, res, next) => {\n  const email = req.body.email;\n  const password = req.body.password;\n\n  // validate the data coming from the client before processing\n  const schema = Joi.object().keys({\n    email: Joi.string().email(),\n    password: Joi.string().required()\n  });\n\n  const result = Joi.validate({ email, password }, schema);\n\n  if (result.error) {\n    res.status(400).json({ status: false, message: result.error });\n  } else {\n    User.findOne({ email })\n      .exec()\n      .then(user => {\n        if (user) {\n          if (user.comparePassword(password)) {\n            req.user = user;\n            res\n              .status(200)\n              .json({ status: true, data: { token: signIn(req.user._id) } });\n          } else {\n            res\n              .status(401)\n              .json({ status: false, message: \"Password is incorrect\" });\n          }\n        } else {\n          res.status(404).json({\n            status: false,\n            message: \"User does not exist! Kindly register\"\n          });\n        }\n      })\n      .catch(error => next(error));\n  }\n};\n\n/**\n *\n * once the Bearer tokenValue is matched, the validateToken grabs the token from req(request)\n */\nexport const decodeToken = () => (req, res, next) => {\n  if (req.headers.access_token) {\n    req.headers.authorization = `Bearer ${req.headers.access_token}`;\n  }\n  validateToken(req, res, next);\n};\n\nexport const getUser = () => (req, res, next) => {\n  User.findById({ _id: req.user.id })\n    .then(user => {\n      if (user) {\n        req.user = user;\n        // get user id and use where necessary\n        req.body.user = user.id;\n        next();\n      } else {\n        res.json({ status: false, message: \"User not found\" });\n      }\n    })\n    .catch(error => next(error));\n};\n\nexport const createUser = (req, res, next) => {\n  const email = req.body.email;\n  const password = req.body.password;\n  const username = req.body.username;\n\n  console.log(req.boody)\n\n  // validate the data coming from the client before processing\n  const schema = Joi.object().keys({\n    email: Joi.string().email(),\n    password: Joi.string().required(),\n    username: Joi.string().required()\n  });\n\n  const result = Joi.validate({ email, password, username }, schema);\n\n  if (result.error) {\n    res.status(400).json({ status: false, message: result.error });\n  } else {\n    User.findOne({ email })\n      .then(user => {\n        if (user) {\n          res\n            .status(400)\n            .json({ status: false, message: \"email already exist\" });\n        } else {\n          const newUser = new User();\n          newUser.email = email;\n          newUser.username = username;\n          newUser.passwordHash = newUser.generateHashPassword(password);\n\n          newUser\n            .save()\n            .then(doc => {\n              req.user = doc;\n              res\n                .status(201)\n                .json({ status: true, data: { token: signIn(req.user._id) } });\n            })\n            .catch(error => next(error));\n        }\n      })\n      .catch(error => next(error));\n  }\n};\n\nexport const secure = [decodeToken(), getUser()];\n"]}